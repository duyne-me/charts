name: "Release charts"

on:
  workflow_dispatch:
    inputs:
      ref:
        description: 'Branch or tag to release from'
        required: false
        default: main
  push:
    branches:
      - main
    paths:
      - 'charts/**'

env:
  HELM_VERSION: 3.15.1
  YQ_VERSION: 4.44.2

jobs:
  release:
    permissions:
      contents: write
      packages: write
      id-token: write
      pull-requests: write
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      # - name: Import GPG key
      #   uses: crazy-max/ghaction-import-gpg@v6
      #   with:
      #     gpg_private_key: ${{ secrets.VM_BOT_GPG_PRIVATE_KEY }}
      #     passphrase: ${{ secrets.VM_BOT_PASSPHRASE }}
      #     git_user_signingkey: true
      #     git_commit_gpgsign: true

      - name: Install tools
        uses: yokawasa/action-setup-kube-tools@v0.11.1
        with:
          setup-tools: |
            helmv3
            yq
          helm: "${{ env.HELM_VERSION }}"
          yq: "${{ env.YQ_VERSION }}"

      - name: Add dependencies
        run: |
          if [ -f .github/ci/helm-repos.yaml ]; then
            REPO_COUNT=$(yq -M eval '.repositories | length' .github/ci/helm-repos.yaml)
            if [ "$REPO_COUNT" -gt 0 ]; then
              yq -M eval '.repositories[] | (.name + " " + .url)' .github/ci/helm-repos.yaml | xargs -L 1 helm repo add
              helm repo update
            else
              echo "No repositories found in .github/ci/helm-repos.yaml, skipping helm repo update."
            fi
          else
            echo ".github/ci/helm-repos.yaml not found, skipping helm repo add and update."
          fi

      - name: Generate docs
        run: |
          if [ -f Makefile ] && grep -q gen-docs Makefile; then
            make gen-docs
          fi

      - name: Generate release notes
        run: |
          for CHANGELOG in $(find charts/*/CHANGELOG.md); do
              if grep -q "^## Next release$" $CHANGELOG; then
                echo "Processing $CHANGELOG"
              else
                echo "ERROR: Not found 'Next release' section in $CHANGELOG"
                exit 1
              fi
              export CHART_DIR="$(dirname $CHANGELOG)"
              export CHART_FILE="${CHART_DIR}/Chart.yaml"
              export APP_VERSION="$(yq -M '.appVersion' $CHART_FILE)"
              export CHART_VERSION="$(yq -M '.version' $CHART_FILE)"
              if grep -q "^## $CHART_VERSION$" $CHANGELOG; then
                echo "There is nothing to release for $CHANGELOG"
              else
                BADGES='![Helm: v3](https://img.shields.io/badge/Helm-v3.14%2B-informational?color=informational&logo=helm&link=https%3A%2F%2Fgithub.com%2Fhelm%2Fhelm%2Freleases%2Ftag%2Fv3.14.0)'
                if [ "$APP_VERSION" != "null" ]; then
                  export APP_VERSION_HASH="$(echo $APP_VERSION | tr -d '.' | cut -f1 -d '-')"
                  export APP_LABEL=$(echo $APP_VERSION | sed 's/-/--/g')
                  export APP_CHANGELOG=$(yq '.annotations["artifacthub.io/links"] | from_yaml | .[] | select(.name == "Changelog").url + "#" + env(APP_VERSION_HASH)| @uri' $CHART_FILE)
                  BADGES+=' ![AppVersion: '$APP_VERSION'](https://img.shields.io/badge/'$APP_LABEL'-success?logo=VictoriaMetrics&labelColor=gray&link='$APP_CHANGELOG')'
                fi
                export BADGES
                export CHANGELOG
                export RELEASE_DATE="**Release date:** $(date '+%d %b %Y')"
                export NOTES="$(sed -n '/## Next release/,/## /p' $CHANGELOG | sed -e '$d' -e '1d')"
                yq -M -i '.annotations["artifacthub.io/changes"] = (load_str(strenv(CHANGELOG)) | capture("## Next release[\s]*(?P<changes>[\s\S]*?)[\s]*##") | .changes | split("\n") | .[] |= sub("^[\s]*-[\s]+", "") | filter(length > 0) | to_yaml)' $CHART_FILE
                export README=${CHART_DIR}/README.md
                yq -M -i '.annotations["artifacthub.io/readme"] = load_str(strenv(README))' $CHART_FILE
                cat <<EOT > ${CHART_DIR}/RELEASE_NOTES
          # Release notes for version $CHART_VERSION

          $RELEASE_DATE

          $BADGES
          $NOTES
          EOT
                sed -i 's/## Next release/&\n\n- TODO\n\n## $CHART_VERSION\n\n$RELEASE_DATE\n\n$BADGES/' $CHANGELOG
                envsubst < $CHANGELOG > $CHANGELOG.copy
                mv $CHANGELOG.copy $CHANGELOG
              fi
          done

      - name: Configure Git
        run: |
          git config --global user.name "$GITHUB_ACTOR"
          git config --global user.email "$GITHUB_ACTOR@users.noreply.github.com"

      - name: Release
        if: ${{ hashFiles('charts/*/RELEASE_NOTES') != '' }}
        uses: helm/chart-releaser-action@v1.6.0
        env:
          CR_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
        with:
          config: .github/ci/cr.yaml
          charts_dir: charts
          skip_existing: true

      - name: Release OCI
        if: ${{ hashFiles('charts/*/RELEASE_NOTES') != '' }}
        run: |
          helm registry login \
            -u ${{ github.actor }} \
            -p ${{ secrets.GITHUB_TOKEN }} \
            ghcr.io
          mkdir -p .cr-release-packages
          for chart in charts/*; do
            if [ ! -f $chart/RELEASE_NOTES ]; then
              export CHART_FILE="${chart}/Chart.yaml"
              export CHART_VERSION="$(yq -M '.version' $CHART_FILE)"
              echo "no release notes for chart $chart. removing it from uploading..."
              rm -rf .cr-release-packages/$(basename $chart)-${CHART_VERSION}.tgz
            fi
          done
          find .cr-release-packages -name "*.tgz" -exec helm push {} oci://ghcr.io/${GITHUB_REPOSITORY_OWNER,,}/helm-charts \;

      - name: Automatic update changelogs and readme
        if: ${{ hashFiles('charts/*/RELEASE_NOTES') != '' }}
        run: |
          rm -rf charts/*/RELEASE_NOTES
          export VM_GIT_BRANCH_NAME="changelog-update-$(date +%s)"
          git checkout -b "${VM_GIT_BRANCH_NAME}"
          git add charts/*/CHANGELOG.md
          git add charts/*/README.md
          git commit -m "Automatic update CHANGELOGs and READMEs"
          git push origin ${VM_GIT_BRANCH_NAME}
          gh pr create \
            -H $(git branch --show-current) \
            -t "Automatic update CHANGELOGs and READMEs" \
            -b "Automatic update CHANGELOGs and READMEs"
        env:
          GH_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
